// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "sqlite"
  url      = "file:./dev.db"
}

model User {
  id        String   @id @default(cuid())
  email     String   @unique
  password  String
  firstName String
  lastName  String
  role      String   @default("USER")
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  trips     Trip[]
  comments  Comment[]
  likes     Like[]
  followers Follows[] @relation("following")
  following Follows[] @relation("follower")

  @@map("users")
}

model Trip {
  id          String   @id @default(cuid())
  name        String
  description String?
  startDate   DateTime
  endDate     DateTime
  budget      Float?
  isPublic    Boolean  @default(false)
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  userId     String
  user       User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  stops      Stop[]
  activities Activity[]
  comments   Comment[]
  likes      Like[]

  @@map("trips")
}

model Stop {
  id          String   @id @default(cuid())
  cityId      String
  arrivalDate DateTime
  departureDate DateTime
  order       Int
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tripId     String
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)
  city       City     @relation(fields: [cityId], references: [id])

  @@map("stops")
}

model City {
  id          String   @id @default(cuid())
  name        String
  country     String
  description String?
  imageUrl    String?
  category    String?
  priceRange  String?
  avgCost     Float?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  stops Stop[]

  @@unique([name, country])
  @@map("cities")
}

model Activity {
  id          String   @id @default(cuid())
  name        String
  description String?
  type        String
  cost        Float?
  location    String?
  startTime   DateTime?
  endTime     DateTime?
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt

  // Relations
  tripId     String
  trip       Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("activities")
}

model Comment {
  id        String   @id @default(cuid())
  content   String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@map("comments")
}

model Like {
  id        String   @id @default(cuid())
  createdAt DateTime @default(now())

  // Relations
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  tripId    String
  trip      Trip     @relation(fields: [tripId], references: [id], onDelete: Cascade)

  @@unique([userId, tripId])
  @@map("likes")
}

model Follows {
  id          String   @id @default(cuid())
  createdAt   DateTime @default(now())

  // Relations
  followerId String
  follower   User     @relation("follower", fields: [followerId], references: [id], onDelete: Cascade)
  followingId String
  following  User     @relation("following", fields: [followingId], references: [id], onDelete: Cascade)

  @@unique([followerId, followingId])
  @@map("follows")
}
